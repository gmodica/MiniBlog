<?xml version="1.0" encoding="utf-8"?>
<post>
  <title>Showing System Fields in a Custom Visualforce Page</title>
  <slug>showing-system-fields-in-a-custom-visualforce-page</slug>
  <author></author>
  <pubDate>2013-11-04 11:37:16</pubDate>
  <lastModified>2013-11-04 11:37:16</lastModified>
  <content>&lt;p&gt;When creating a custom Visualforce page there are times when we would like to have a section showing system fields. In a standard visualforce page (the ones automatically generated by the platform) we see the following fields:&lt;ul&gt;&lt;li&gt;Created By: showing the name of the user who created the record and the creation date and time&lt;/li&gt;&lt;li&gt;Last Modified By: showing the name of the last user who modified the record and the date and time of this modification&lt;/li&gt;&lt;li&gt;Owner ID: The name of the user who owns the record, its picture, and a link that allows to change the owner.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Most of this information can be showed by using &lt;font face="Consolas"&gt;apex:outputField&lt;/font&gt; commands. For example:&lt;pre class="brush: xml; ruler: true;"&gt;&amp;lt;apex:pageBlock mode="mainDetail" &amp;gt;
  &amp;lt;apex:pageBlockSection title="{!$Label.SystemInformation}" columns="2"&amp;gt;
    &amp;lt;apex:outputField value="{!Contact.CreatedById}" /&amp;gt;
    &amp;lt;apex:outputField value="{!Contact.CreatedDate}" /&amp;gt;
    &amp;lt;apex:outputField value="{!Contact.LastModifiedById}"/&amp;gt;
    &amp;lt;apex:outputField value="{!Contact.LastModifiedDate}"/&amp;gt;
    &amp;lt;apex:outputField value="{!Contact.OwnerId}"/&amp;gt;
  &amp;lt;/apex:pageBlockSection&amp;gt;
&amp;lt;/apex:pageBlock&amp;gt;
&lt;/pre&gt;&lt;p&gt;This will produce the following output:&lt;p&gt;&lt;a href="http://blog.giovannimodica.com/posts/files/f2125224-6bfb-4fdb-bdbb-af67c8470a4b.jpg"&gt;&lt;img width="644" height="96" title="standardSystemInformation" style="display: inline; background-image: none;" alt="standardSystemInformation" src="http://blog.giovannimodica.com/posts/files/69ac2e21-6963-4586-a12b-614203ff1ac1.jpg" border="0"&gt;&lt;/a&gt;&lt;p&gt;Notice that we get all the necessary information, but we lose some cool features:&lt;ul&gt;&lt;li&gt;There is no “Change” link to change the owner&lt;/li&gt;&lt;li&gt;There is no photo of the owner&lt;/li&gt;&lt;li&gt;The format is not like the one in the standard page.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;We could get the format we desire by tweaking the visualforce a little bit (e.g. use &lt;font face="Consolas"&gt;apex:outputPanel&lt;/font&gt; to group fields together in the same line) but having the “change” and the photo is not trivial thing. Besides, by using &lt;font face="Consolas"&gt;apex:outputPanel&lt;/font&gt; and &lt;font face="Consolas"&gt;apex:outputText&lt;/font&gt; we lose the cool popup that shows summary information when we hover the mouse over the links.&lt;p&gt;The following example contains a Visualforce component that can be added to any custom page to display the system fields in a format that mimics the format produced by a standard page.&lt;pre class="brush: xml; ruler: true;"&gt;&amp;lt;apex:component controller="SystemInformationComponentController"&amp;gt; 
    &amp;lt;apex:attribute name="record" assignTo="{!recordValue}" 
        type="sObject" description="The object for which to display system information" required="true"/&amp;gt;
    
    &amp;lt;apex:pageBlockSection title="{!$Label.SystemInformation}" columns="2"&amp;gt;
        &amp;lt;apex:pageBlockSectionItem &amp;gt;
            &amp;lt;apex:outputLabel value="{!$Label.CreatedBy}" /&amp;gt;
            &amp;lt;apex:outputPanel &amp;gt;
                &amp;lt;apex:outputLink id="createdBy"
                    onblur="LookupHoverDetail.getHover('{!$Component.createdBy}').hide();" 
                    onfocus="LookupHoverDetail.getHover('{!$Component.createdBy}', '/{!createdById}/m?retURL={!URLENCODE($CurrentPage.Url)}&amp;amp;isAjaxRequest=1').show();" 
                    onmouseout="LookupHoverDetail.getHover('{!$Component.createdBy}').hide();" 
                    onmouseover="LookupSHoverDetail.getHover('{!$Component.createdBy}', '/{!createdById}/m?retURL={!URLENCODE($CurrentPage.Url)}&amp;amp;isAjaxRequest=1').show();"                       
                 value="{!URLFOR('/' + createdById)}"&amp;gt;{!createdByName}&amp;lt;/apex:outputLink&amp;gt;&amp;amp;nbsp;
                &amp;lt;apex:outputText value="{!convertedCreatedDate}" /&amp;gt;                                                                         
            &amp;lt;/apex:outputPanel&amp;gt;
        &amp;lt;/apex:pageBlockSectionItem&amp;gt; 
        &amp;lt;apex:pageBlockSectionItem &amp;gt;
            &amp;lt;apex:outputLabel value="{!$Label.LastModifiedBy}" /&amp;gt;
            &amp;lt;apex:outputPanel &amp;gt;
                &amp;lt;apex:outputLink id="lastModifiedBy"
                    onblur="LookupHoverDetail.getHover('{!$Component.lastModifiedBy}').hide();" 
                    onfocus="LookupHoverDetail.getHover('{!$Component.lastModifiedBy}', '/{!lastModifiedById}/m?retURL={!URLENCODE($CurrentPage.Url)}&amp;amp;isAjaxRequest=1').show();" 
                    onmouseout="LookupHoverDetail.getHover('{!$Component.lastModifiedBy}').hide();" 
                    onmouseover="LookupHoverDetail.getHover('{!$Component.lastModifiedBy}', '/{!lastModifiedById}/m?retURL={!URLENCODE($CurrentPage.Url)}&amp;amp;isAjaxRequest=1').show();"                       
                 value="{!URLFOR('/' + lastModifiedById)}"&amp;gt;{!lastModifiedByName}&amp;lt;/apex:outputLink&amp;gt;&amp;amp;nbsp;
                &amp;lt;apex:outputText value="{!convertedLastModifiedDate}" /&amp;gt;                                                                         
            &amp;lt;/apex:outputPanel&amp;gt;
        &amp;lt;/apex:pageBlockSectionItem&amp;gt;
        &amp;lt;apex:pageBlockSectionItem &amp;gt;
            &amp;lt;apex:outputLabel for="owner" value="{!$Label.Owner}" /&amp;gt;
            &amp;lt;apex:outputPanel &amp;gt;
                &amp;lt;apex:image value="{!ownerPhoto}" width="16" height="16"/&amp;gt;&amp;amp;nbsp;
                &amp;lt;apex:outputLink id="owner"
                    onblur="LookupHoverDetail.getHover('{!$Component.owner}').hide();" 
                    onfocus="LookupHoverDetail.getHover('{!$Component.owner}', '/{!ownerId}/m?retURL={!URLENCODE($CurrentPage.Url)}&amp;amp;isAjaxRequest=1').show();" 
                    onmouseout="LookupHoverDetail.getHover('{!$Component.owner}').hide();" 
                    onmouseover="LookupHoverDetail.getHover('{!$Component.owner}', '/{!ownerId}/m?retURL={!URLENCODE($CurrentPage.Url)}&amp;amp;isAjaxRequest=1').show();"
                 value="{!URLFOR('/' + ownerId)}"&amp;gt;{!ownerName}&amp;lt;/apex:outputLink&amp;gt;&amp;amp;nbsp;
                &amp;lt;apex:outputLink value="{!URLFOR('/' + recordId + '/a?retURL=' + URLENCODE($CurrentPage.Url))}"&amp;gt;[Change]&amp;lt;/apex:outputLink&amp;gt;
            &amp;lt;/apex:outputPanel&amp;gt;
        &amp;lt;/apex:pageBlockSectionItem&amp;gt;        
    &amp;lt;/apex:pageBlockSection&amp;gt;
&amp;lt;/apex:component&amp;gt;
&lt;/pre&gt;&lt;p&gt;This component requires the following controller:&lt;/p&gt;&lt;pre class="brush: java; ruler: true;"&gt;public class SystemInformationComponentController{
    public sObject recordValue { get; set;}
    
    public Id recordId {
        get {
            return recordValue.Id;
        }
    }  
       
    public Id createdById {
        get {
            return (Id)recordValue.get('CreatedById');
        }
    }  
    
    public String createdByName {
        get {
            User createdByUser = [select name from user where id = :createdById limit 1];
            return createdByUser == null ? null : createdByUser.Name;
        }
    }
        
    public String convertedCreatedDate {
        get { 
            DateTime createdDate = (DateTime)recordValue.get('CreatedDate');
            return createdDate.format(); 
        }
    }
    
    public Id lastModifiedById {
        get {
            return (Id)recordValue.get('LastModifiedById');
        }
    }  
    
    public String lastModifiedByName {
        get {
            User lastModifiedByUser = [select name from user where id = :lastModifiedById limit 1];
            return lastModifiedByUser == null ? null : lastModifiedByUser.Name;
        }
    }
        
    public String convertedLastModifiedDate {
        get {
            DateTime lastModifiedDate = (DateTime)recordValue.get('LastModifiedDate');
            return lastModifiedDate.format(); 
        }
    } 
    
    public Id ownerId {
        get {
            return (Id)recordValue.get('OwnerId');
        }
    }  
    
    public String ownerName {
        get {
            User ownerUser = [select name from user where id = :ownerId limit 1];
            return ownerUser == null ? null : ownerUser.Name;
        }
    }
    
    public String ownerPhoto {
        get {
            Id ownerId = (Id)recordValue.get('ownerId');
            User owner = [select smallphotourl from user where id = :ownerId limit 1];
            return owner == null ? null : owner.SmallPhotoUrl;

        }
    }           
}

&lt;/pre&gt;&lt;p&gt;To use the component, simply call it from your custom page passing the record for the page:&lt;pre class="brush: xml; ruler: true;"&gt;&amp;lt;apex:page standardController="Contact"&amp;gt;
  &amp;lt;apex:pageBlock mode="mainDetail" &amp;gt;
    &amp;lt;apex:outputField value="{!Contact.CreatedById}" rendered="false" /&amp;gt;
    &amp;lt;apex:outputField value="{!Contact.CreatedDate}" rendered="false" /&amp;gt;
    &amp;lt;apex:outputField value="{!Contact.LastModifiedById}" rendered="false" /&amp;gt;
    &amp;lt;apex:outputField value="{!Contact.LastModifiedDate}" rendered="false" /&amp;gt;
    &amp;lt;apex:outputField value="{!Contact.OwnerId}" rendered="false" /&amp;gt;
    &amp;lt;c:SystemInformationComponent record="{!record}" /&amp;gt;
  &amp;lt;/apex:pageBlock&amp;gt;
&amp;lt;/apex:page&amp;gt;
&lt;/pre&gt;&lt;p&gt;This will produce the following:&lt;p&gt;&lt;a href="http://blog.giovannimodica.com/posts/files/5a4f9480-5ed2-40f2-a916-67fb82aadb12.jpg"&gt;&lt;img width="644" height="75" title="customizedSystemInformation" style="display: inline; background-image: none;" alt="customizedSystemInformation" src="http://blog.giovannimodica.com/posts/files/cde449b3-3eff-4ced-9b2e-0e74128848e3.jpg" border="0"&gt;&lt;/a&gt;&lt;p&gt;Notice how we get all the features we need and they look as a standard page output.&lt;p&gt;There are some things to consider when using this component:&lt;ul&gt;&lt;li&gt;Custom labels: for the component to be used in multiple languages, notice that the field labels use the following custom labels:&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;font face="Consolas"&gt;$Label.SystemInformation&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font face="Consolas"&gt;$Label.CreatedBy&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font face="Consolas"&gt;$Label.LastModifiedBy&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font face="Consolas"&gt;$Label.Owner&lt;/font&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;The controller is based in the generic &lt;font face="Consolas"&gt;sObject&lt;/font&gt; type, allowing the component to be used in any standard or custom object&lt;/li&gt;&lt;li&gt;Datetimes are formatted using the &lt;font face="Consolas"&gt;format()&lt;/font&gt; method to show the converted datetime in the user’s profile timezone&lt;/li&gt;&lt;li&gt;In order to display the owner photo, the system must have Chatter enabled.&lt;/li&gt;&lt;li&gt;When using the component, the calling page must include the following fields (using an &lt;font face="Consolas"&gt;&amp;lt;apex:outputField value=”…” rendered=”false” /&amp;gt;&lt;/font&gt;):&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;font face="Consolas"&gt;CreatedById&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font face="Consolas"&gt;CreatedDate&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font face="Consolas"&gt;LastModifiedById&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font face="Consolas"&gt;LastModifiedDate&lt;/font&gt;&lt;/li&gt;&lt;li&gt;&lt;font face="Consolas"&gt;OwnerId&lt;/font&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;This is to make the fields available to the standard controller (and thus, the underlying &lt;font face="Consolas"&gt;record&lt;/font&gt; property) so it can be used on the component’s controller (see the above example to see how)&lt;p&gt;For completeness, here is the test for the controller:&lt;pre class="brush: java; ruler: true;"&gt;@isTest
public class SystemInformationComponentTest{
 
    @isTest public static void TestComponent() {
        
        Account record = new Account(Name = 'Test');
        insert record;
        record = [select ownerId,createdById,lastModifiedById,createdDate,lastModifiedDate from account where id = :record.id];
        User owner = [select name,smallPhotoUrl from user where id = :record.ownerId];
            
        SystemInformationComponentController controller = new SystemInformationComponentController();
        controller.recordValue = record;
        
        System.assertEquals(record.Id, controller.recordId);
        System.assertEquals(record.CreatedById, controller.createdById);
        System.assertEquals(record.LastModifiedById, controller.lastModifiedById);
        System.assertEquals(record.OwnerId, controller.ownerId);
        System.assertEquals(record.CreatedDate.format(), controller.convertedCreatedDate);
        System.assertEquals(record.LastModifiedDate.format(), controller.convertedLastMOdifiedDate);
        System.assertEquals(owner.Name, controller.ownerName);
        System.assertEquals(owner.SmallPhotoUrl, controller.ownerPhoto); 
        System.assertEquals(owner.Name, controller.lastModifiedByName);
        System.assertEquals(owner.Name, controller.createdByName);
    }
}
&lt;/pre&gt;</content>
  <ispublished>true</ispublished>
  <categories>
    <category>visualforce</category>
    <category>salesforce</category>
  </categories>
  <comments></comments>
</post>